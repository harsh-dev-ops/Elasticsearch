services:

  postgres:
    image: postgres:15-alpine
    ports:
      - '5431:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  ref_database:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    volumes:
      - ref_pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: 'redis:alpine'
    volumes:
      - redis_data:/data
    ports:
      - '6378:6379'

  backend:
    build:
      context: .
      dockerfile: docker/fastapi/dockerfile
    image: ecommerce:fastapi
    env_file:
      - .env
    ports:
      - "8001:8001"
      - "8000:8000"
    volumes:
      - .:/home/app
    command: bash docker/dev/entrypoint.sh

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
  #   container_name: elasticsearch
  #   environment:
  #     - xpack.security.enabled=false
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   ports:
  #     - '9200:9200'
  #   volumes:
  #     - search-data:/usr/share/elasticsearch/data
    # depends_on:
    #   - database
    #   - redis

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.14.1
  #   ports:
  #     - '5601:5601'
  #   environment:
  #     - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
  #   depends_on:
  #     - elasticsearch
  
  # pgsync:
  #   image: pgsync
  #   build:
  #     context: ./pgsync
  #     dockerfile: dockerfile
  #   container_name: pgsync
  #   volumes:
  #     - ./pgsync:/usr/src/app
  #   env_file:
  #     - .env
  #   depends_on:
  #     - database
  #     - redis

volumes:
  pgdata:
  ref_pgdata:
  redis_data: